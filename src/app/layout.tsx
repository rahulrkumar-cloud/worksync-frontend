// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { cookies } from "next/headers";
import { AuthProvider } from "@/context/TokenProvider"; // ✅ Import updated TokenProvider
import Wrapper from "@/components/Wrapper/Wrapper";
import PrimarySearchAppBar from "@/components/WorkSyncNavbar/PrimarySearchAppBar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "WorkSync",
  description: "Generated by WorkSync",
};

export const dynamic = "force-dynamic"; // ✅ Ensure fresh token on hard reload
const PagePaddingWrapper = ({ children }: { children: React.ReactNode }) => {
  return <div className="pt-[-56px] md:pt-[-64px]">{children}</div>;
};



export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en">
      <body>
        <AuthProvider>
          <PrimarySearchAppBar />
          <Wrapper>
            <PagePaddingWrapper>
              {children}
            </PagePaddingWrapper>
          </Wrapper>

        </AuthProvider>
      </body>
    </html>
  );
}

